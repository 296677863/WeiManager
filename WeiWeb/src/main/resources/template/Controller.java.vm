package ${package}.controller;



import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import com.weiweb.common.controller.BaseController;
import com.weiweb.common.utils.StringUtils;
import com.weiweb.core.mybatis.page.Pagination;
import com.weiweb.core.shiro.po.Message;
import com.weiweb.core.shiro.session.CustomSessionManager;

import ${package}.model.${className};
import ${package}.service.${className}Service;
import ${package}.bo.${className}BO;



/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("${pathName}")
public class ${className}Controller extends BaseController{
	@Autowired
	private ${className}Service ${classname}Service;
	
	@RequestMapping(value="list")
	public ModelAndView list(ModelMap map,Integer pageNo,String findContent){
		return new ModelAndView("${pathName}/list");
	}
	
	@RequestMapping("/listData")
	@ResponseBody
	public Pagination<${className}> listData(${className} user,Integer pageNo, ModelMap map){
	
		Pagination<${className}> page = ${classname}Service.findByPage(map,pageNo,pageSize);
		return page;
		

	}
	
	@RequestMapping(value="delete${classname}ById",method=RequestMethod.POST)
	@ResponseBody
	public Message delete${classname}ByIds(String ids){
		String[] arryids = ids.split(",");
		if( ${classname}Service.delete${classname}ByIds(arryids)){
			return ERROR_MESSAGE;
		}else{
			return SUCCESS_MESSAGE;
		}
	}
	
	@RequestMapping("/add")
	public String add( ModelMap model){
		return "/${pathName}/add";
	}
	
	@RequestMapping("/edit/{id}")
	public String edit( @PathVariable("id")String id,ModelMap model){
		if(!StringUtils.isEmpty(id))
			model.addAttribute("bean",${classname}Service.selectByPrimaryKey(id));
		return "/${pathName}/edit";
	}
		
	@RequestMapping("/save")
	@ResponseBody
	public Message save(${className} bean,RedirectAttributes redirectAttributes){
		try{
			${classname}Service.insert(bean);
		} catch (Exception e) {
			e.printStackTrace();
			return ERROR_MESSAGE;
		}
		return Message.success(bean);
	}
	
	@RequestMapping("/info/{id}")
	public String info( @PathVariable("id")String id,ModelMap model){
		if(!StringUtils.isEmpty(id))
			model.addAttribute("bean",${classname}Service.selectByPrimaryKey(id));
		return "/${pathName}/info";
	}
	
	
	
	
	
}
